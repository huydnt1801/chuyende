// Code generated by ent, DO NOT EDIT.

package trip

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the trip type in the database.
	Label = "trip"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDriveID holds the string denoting the drive_id field in the database.
	FieldDriveID = "drive_id"
	// FieldStartX holds the string denoting the start_x field in the database.
	FieldStartX = "start_x"
	// FieldStartY holds the string denoting the start_y field in the database.
	FieldStartY = "start_y"
	// FieldEndX holds the string denoting the end_x field in the database.
	FieldEndX = "end_x"
	// FieldEndY holds the string denoting the end_y field in the database.
	FieldEndY = "end_y"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the trip in the database.
	Table = "trips"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "trips"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for trip fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldDriveID,
	FieldStartX,
	FieldStartY,
	FieldEndX,
	FieldEndY,
	FieldPrice,
	FieldStatus,
	FieldRate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// RateValidator is a validator for the "rate" field. It is called by the builders before save.
	RateValidator func(int) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusAccept  Status = "accept"
	StatusDone    Status = "done"
	StatusCancel  Status = "cancel"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusAccept, StatusDone, StatusCancel:
		return nil
	default:
		return fmt.Errorf("trip: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Trip queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDriveID orders the results by the drive_id field.
func ByDriveID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDriveID, opts...).ToFunc()
}

// ByStartX orders the results by the start_x field.
func ByStartX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartX, opts...).ToFunc()
}

// ByStartY orders the results by the start_y field.
func ByStartY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartY, opts...).ToFunc()
}

// ByEndX orders the results by the end_x field.
func ByEndX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndX, opts...).ToFunc()
}

// ByEndY orders the results by the end_y field.
func ByEndY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndY, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
